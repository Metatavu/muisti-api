buildscript {
  ext.kotlin_version = '1.3.61'
  ext.wildfly_version = '18.0.1.Final'
  ext.keycloak_version = '8.0.1'
  ext.liquibase_version = "3.8.0"
  ext.awssdk_version = "1.11.673"
  ext.jackson_version = "2.9.10"
  ext.slf4j_version = "1.6.1"

  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.avast.gradle:gradle-docker-compose-plugin:0.10.7"
    classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
  }
}

plugins {
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.4'
}

apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'docker-compose'
apply plugin: 'kotlin-kapt'
apply plugin: "com.dorongold.task-tree"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
  jcenter()
}

configurations {
  jacocoAgent
}

dependencies {
  kapt "org.hibernate:hibernate-jpamodelgen:5.4.11.Final"

  implementation project(':api-spec')

  implementation platform("org.wildfly:wildfly-spec-api:$wildfly_version")
  implementation platform("com.amazonaws:aws-java-sdk-bom:$awssdk_version")

  compileOnly 'org.jboss.spec.javax.servlet:jboss-servlet-api_4.0_spec'
  compileOnly 'org.jboss.resteasy:resteasy-jaxrs'
  compileOnly 'org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec'
  compileOnly 'org.hibernate:hibernate-core'
  compileOnly 'org.hibernate:hibernate-entitymanager'
  compileOnly 'org.hibernate.validator:hibernate-validator'
  compileOnly "jakarta.validation:jakarta.validation-api"
  compileOnly "org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec"
  compileOnly "jakarta.inject:jakarta.inject-api"
  compileOnly "jakarta.enterprise:jakarta.enterprise.cdi-api"
  compileOnly "jakarta.persistence:jakarta.persistence-api"
  compileOnly "org.keycloak:keycloak-core:$keycloak_version"
  compileOnly "org.keycloak:keycloak-adapter-spi:$keycloak_version"
  compileOnly "org.keycloak:keycloak-authz-client:$keycloak_version"
  compileOnly "org.slf4j:slf4j-simple:$slf4j_version"
  compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  compileOnly "org.apache.commons:commons-lang3"

  implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  implementation "com.amazonaws:aws-java-sdk-s3"
  implementation "org.liquibase:liquibase-cdi:$liquibase_version"

  testImplementation project(':api-client')

  testImplementation "org.apache.commons:commons-lang3"
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.hamcrest:hamcrest:2.2'
  testImplementation "fi.metatavu.jaxrs.testbuilder:jaxrs-functional-test-builder:1.0.4"

  jacocoAgent 'org.jacoco:org.jacoco.agent:0.8.5'
}

jacoco {
  toolVersion = "0.8.5"
}

task unzipJacoco(type: Copy) {
  doFirst {
    mkdir "$buildDir/jacoco"
  }

  from zipTree(configurations.jacocoAgent.singleFile)
  into "$buildDir/jacocoagent"
}

static boolean doHead(url) {
  def connection = new URL(url).openConnection()
  connection.requestMethod = 'GET'
  try {
    connection.responseCode == 200
  } catch (IOException error) {
    error.printStackTrace()
    false
  }
}

static void waitUrl(url) {
  println "Waiting for ${url} ..."
  while (!doHead(url)) {
    sleep(100)
  }
  println "${url} is up!"
}

dockerCompose {
  captureContainersOutput = true
  environment.put 'JACOCO_AGENT', "${buildDir}/jacocoagent/jacocoagent.jar"
  environment.put 'JACOCO', "${buildDir}/jacoco"
}

composeUp {
  dependsOn tasks.unzipJacoco
}

coveralls {
  sourceDirs += ['src/main/kotlin']
}

test {
  dependsOn tasks.composeUp
  finalizedBy tasks.composeDown

  doFirst {
    waitUrl("http://localhost:8080/auth")
    waitUrl("http://localhost:1234/v1/system/ping")
  }

  useJUnit()
  maxHeapSize = '1G'

  jacoco {
    enabled = true
    output = JacocoTaskExtension.Output.FILE
    destinationFile = file("$buildDir/jacoco/test.exec")
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
      html.enabled true
      executionData fileTree(buildDir).include("/jacoco/it.exec")
    }
  }
}